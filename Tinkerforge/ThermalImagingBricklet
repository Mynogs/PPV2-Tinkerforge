-- 18.02.2018 10:05:05 AR V1.0a

block.setSize(151, 51)

generic = {
  name = 'Thermal Imaging Bricklet',
  parameter = {
    uid = 'aaa',
    spotmeter = false,
    spotmeterX1 = 39,
    spotmeterY1 = 29,
    spotmeterX2 = 40,
    spotmeterY2 = 30,
  },

  init = function(self)
    block.setInputsPinCount(0)
    block.setOutputsPinCount(2)
    block.setOutputPinName(1, 'image')
    block.setOutputPinName(2, 'spotT')
    block.setOutputPinTypeRestrains(1, 'table')
    block.modifyFlags('SupressStopFunctionCall', true)
    block.modifyFlags('Realtime', true)
  end,

  open = function(self)
    gui.add('Info', 'Info', 'Bricklet', self.name)
    gui.add('Edit', 'EditUID', 'Bricklet UID')
    gui.add('Button', 'ButtonUID', "Select UID")
    gui.add('CheckBox', 'CheckBoxSpotmeter', 'Enable spotmeter')
    gui.add('Edit', 'EditSpotmeterX1', 'Spotmeter left', {IntegerMode = true})
    gui.add('Edit', 'EditSpotmeterY1', 'Spotmeter top', {IntegerMode = true})
    gui.add('Edit', 'EditSpotmeterX2', 'Spotmeter right', {IntegerMode = true})
    gui.add('Edit', 'EditSpotmeterY2', 'Spotmeter bottom', {IntegerMode = true})
    gui.set('EditUID', 'Text', self.parameter.uid)
    gui.set('CheckBoxSpotmeter', 'Checked', self.parameter.spotmeter)
    gui.set('EditSpotmeterX1', 'Integer', self.parameter.spotmeterX1)
    gui.set('EditSpotmeterY1', 'Integer', self.parameter.spotmeterY1)
    gui.set('EditSpotmeterX2', 'Integer', self.parameter.spotmeterX2)
    gui.set('EditSpotmeterY2', 'Integer', self.parameter.spotmeterY2)
    gui.setEventHandler(
      self,
      'ButtonUID',
      {
        Click = function(self)
          local uid = require('tinkerForge').selectDialog(self.name)
          if uid then
            gui.set('EditUID', 'Text', uid)
            self.parameter.uid = uid
          end
        end,
      }
    )
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.uid = gui.get('EditUID', 'Text')
    self.parameter.spotmeter = gui.get('CheckBoxSpotmeter', 'Checked')
    self.parameter.spotmeterX1 = gui.get('EditSpotmeterX1', 'Integer')
    self.parameter.spotmeterY1 = gui.get('EditSpotmeterY1', 'Integer')
    self.parameter.spotmeterX2 = gui.get('EditSpotmeterX2', 'Integer')
    self.parameter.spotmeterY2 = gui.get('EditSpotmeterY2', 'Integer')
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar(0x00, "'" .. self.parameter.uid .. "'", "", "0.0, 0.66, 0.91")
  end,

  generate = function(self)
    local source =
      [==[
        local block = {}

        block.start = function()
          block.bricklet = assert(require('tinkerForge').new('NAME', 'UID', 2, 0, 1))
          block.bricklet:io(10, "u1", 0, false)
          block.bricklet:io(6, "u1u1u1u1", SPOTL, SPOTT, SPOTR, SPOTB, false)
          block.image = {width = 80, height = 60, bits = 8}
          for y = 1, 60 do
            block.image[y] = {}
            for x = 1, 80 do
              block.image[y][x] = y + y + x
            end
          end

        end

        block.step = function()
          while true do
            local o, d = block.bricklet:io(1, false, "u2s62")
            --print(o)
            __1 = d
            local n = o <= 4712 and 80 or 26
            for j = 1, n do
              block.image[o // 80 + 1][o % 80 + 1] = d:byte(j)
              o = o + 1
            end
            if n < 80 then
              break
            end
          end

          local spotT
          if SPOTMETER then
            --spotmeter_statistics -- uint16[4]
            --temperatures -- uint16[4]
            --resolution -- uint8
            --ffc_status -- uint8
            --temperature_warning -- bool[2]
            local avrT, maxT, minT, nPix = block.bricklet:io(3, false, "u2u2u2u2")
            spotT = avrT / 100.0
          end
          return block.image, spotT
        end
        return block
      ]==]
    local replaces = {
      ['NAME'] = self.name,
      ['UID'] = self.parameter.uid,
      ['SPOTMETER'] = self.parameter.spotmeter and 'true' or 'false',
      ['SPOTL'] = self.parameter.spotmeterX1,
      ['SPOTT'] = self.parameter.spotmeterY1,
      ['SPOTR'] = self.parameter.spotmeterX2,
      ['SPOTB'] = self.parameter.spotmeterY1,
    }
    return string.gsub(source, '%a+', replaces)
  end,

}

