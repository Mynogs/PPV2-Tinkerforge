-- 28.02.2017 11:13:40 AR V1.0a
-- 01.04.2017 16:58:53 AR V1.0b
-- 25.06.2017 19:25:43 AR V1.0c
-- 23.01.2018 06:36:34 AR V1.0d Left and right value

block.setSize(151, 51)

generic = {
  name = 'Rotary Poti Bricklet',
  parameter = {
    uid = 'aaa',
    left = -1.0,
    right = 1.0
  },

  init = function(self)
    block.setInputsPinCount(0)
    block.setOutputsPinCount(1)
    block.modifyFlags('SupressStopFunctionCall', true)
    block.modifyFlags('Realtime', true)
  end,

  open = function(self)
    gui.add('Info', 'Info', 'Bricklet', self.name)
    gui.add('Edit', 'EditUID', 'Bricklet UID')
    gui.add('Button', 'ButtonUID', "Select UID")
    gui.add('Edit', 'EditLeft', 'Left value')
    gui.add('Edit', 'EditRight', 'Right value')
    gui.set('EditUID', 'Text', self.parameter.uid)
    gui.set('EditLeft', 'Number', self.parameter.left)
    gui.set('EditRight', 'Number', self.parameter.right)
    gui.setEventHandler(
      self,
      'ButtonUID',
      {
        Click = function(self)
          local uid = require('tinkerForge').selectDialog(self.name)
          if uid then
            gui.set('EditUID', 'Text', uid)
            self.parameter.uid = uid
          end
        end,
      }
    )
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.uid = gui.get('EditUID', 'Text')
    self.parameter.left = gui.get('EditLeft', 'Number')
    self.parameter.right = gui.get('EditRight', 'Number')
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar(0x00, "'" .. self.parameter.uid .. "'", "", "0.0, 0.66, 0.91")
  end,

  generate = function(self)
    local source =
      [==[
        local block = {}

        block.start = function()
          block.bricklet = assert(require('tinkerForge').new('NAME', 'UID', 2, 0, 1))
        end

        block.step = function()
          return (block.bricklet:io(1, false, "d2") SHIFT) SCALE
        end

        return block
      ]==]
    local range = self.parameter.right - self.parameter.left
    local shift = range * self.parameter.left * 75.0 + 150.0
    local scale = 1.0 / (300.0 / range)
    local replaces = {
      ['NAME'] = self.name,
      ['UID'] = self.parameter.uid,
      ['SHIFT'] = shift ~= 0.0 and '+ ' .. shift or '',
      ['SCALE'] = scale ~= 1.0 and '* ' .. scale or ''
    }
    return string.gsub(source, '%a+', replaces)
  end,

}

