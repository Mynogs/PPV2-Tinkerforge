-- 28.10.2018 08:26:47 AR V1.0a

block.setSize(151, 51)

generic = {
  name = 'Industrial Analog Out Bricklet 2.0',
  parameter = {
    uid = 'aaa',
    mode = 0
  },

  init = function(self)
    block.setInputsPinCount(2)
    block.setOutputsPinCount(0)
    block.setInputPinName(2, 'enable')
    block.setInputPinTypeRestrains(2, 'boolean')
    block.setInputPinDefault(2, true)
    block.modifyFlags('SupressStopFunctionCall', true)
    block.modifyFlags('Realtime', true)
    block.setInputPinName(1, (self.parameter.mode <= 1) and 'u [V]' or 'i [A]')
  end,

  open = function(self)
    gui.add('Info', 'Info', 'Bricklet', self.name)
    gui.add('Edit', 'EditUID', 'Bricklet UID')
    gui.add('Button', 'ButtonUID', "Select UID")
    gui.add('RadioGroup', 'RadioGroupMode', 'Mode', '0 - 5V\n0 - 10V\n4 - 20mA\n0 - 20mA\n0 - 24mA')
    gui.set('EditUID', 'Text', self.parameter.uid)
    gui.set('RadioGroupMode', 'ItemIndex', self.parameter.mode)
    gui.setEventHandler(
      self,
      'ButtonUID',
      {
        Click = function(self)
          local uid = require('tinkerForge').selectDialog(self.name)
          if uid then
            gui.set('EditUID', 'Text', uid)
            self.parameter.uid = uid
          end
        end,
      }
    )
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.uid = gui.get('EditUID', 'Text')
    self.parameter.mode = gui.get('RadioGroupMode', 'ItemIndex')
    block.setInputPinName(1, (self.parameter.mode <= 1) and 'u [V]' or 'i [A]')
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar(0x00, "'" .. self.parameter.uid .. "'", "", "0.0, 0.66, 0.91")
  end,

  generate = function(self)
    local source =
      [==[
        local block = {}

        block.start = function()
          block.enable = false
          block.bricklet = assert(require('tinkerForge').new('NAME', 'UID', 2, 0, 0))
          block.bricklet:io(7, "u1u1", CONFIG, false)
        end

        block.step = function(ui, enable)
          if enable ~= block.enable then
            block.bricklet:io(1, "b1", enable, false)
            block.enable = enable
          end
          STEP
        end

        return block
      ]==]
    local replaces = {
      ['NAME'] = self.name,
      ['UID'] = self.parameter.uid,
      ['STEP'] = (self.parameter.mode <= 1) and 'block.bricklet:io(3, "u2", ui * 1000.0, false)' or 'block.bricklet:io(5, "u2", ui * 1.0E6, false)',
      ['CONFIG'] = ({'0, 0', '1, 0', '0, 0', '0, 1', '0, 2'})[self.parameter.mode + 1]
    }
    return string.gsub(source, '%a+', replaces)
  end,

}

